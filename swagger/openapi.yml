openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/borsch-lang/playground-api/1.0.0
info:
  title: Borsch Playground API
  description: |
    This API allows to execute the code written in the Borsch programming language
    without installing the interpreter on the local machine.
  version: "1.0.0"
  contact:
    name: API Issues
    url: https://github.com/YuriyLisovskiy/borsch-playground-api/issues
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: jobs
    description: Operations for managing jobs
paths:
  /api/v1/lang/versions:
    get:
      summary: Get available versions of the Borsch language
      description: "Returns a list of available versions of the Borsch language."
      operationId: getLanguages
      responses:
        '200':
          description: The array of versions of the Borsch language
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: SemVer
                example: [0.1.0, 0.1.6]
  /api/v1/jobs/{id}:
    get:
      tags:
        - jobs
      summary: Get job
      description: "Returns job info without outputs."
      operationId: getJob
      parameters:
        - in: path
          name: id
          description: The job ID
          required: true
          schema:
            type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobItem'
        '404':
          description: Job does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNotFoundResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/v1/jobs/{id}/output:
    get:
      tags:
        - jobs
      summary: Get the console output of the completed job
      operationId: getJobOutput
      parameters:
        - in: path
          name: id
          description: The job ID
          required: true
          schema:
            type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        - in: query
          name: offset
          description: Skip first n rows
          required: false
          schema:
            $ref: '#/components/schemas/PositiveInt64'
          example: 7
        - in: query
          name: limit
          description: Get first n rows after offset
          required: false
          schema:
            $ref: '#/components/schemas/PositiveInt64'
          example: 5
        - in: query
          name: format
          description: Format of the output result
          required: false
          schema:
            type: string
            enum:
              - json
              - txt
            example: json
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOutputResponse'
            text/plain:
              schema:
                type: string
                example: |
                  Виконання алгоритму пошуку...
                  Результат знайдено: 123
        '400':
          description: Bad input parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentation_url:
                    type: string
                    format: link
                    example: <link to the current site>
                  message:
                    type: string
                    example: limit is invalid integer value
        '404':
          description: Job does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNotFoundResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
  /api/v1/jobs:
    post:
      tags:
        - jobs
      summary: Create a new job
      description: "Enqueues a new job that will execute the source code."
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobInput'
      responses:
        '201':
          description: Job was created
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                    format: uuid
                    example: 1f9f329f-300a-43f4-8c7d-0889452e1d11
                  output_url:
                    type: string
                    format: link
                    example: 'https://example.com/api/v1/jobs/d290f1ee-6c54-4b01-90e6-d701748f0851/output'
        '400':
          description: Bad input parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentation_url:
                    type: string
                    example: <link to the current site>
                  message:
                    type: string
                    example: source code is not provided
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
components:
  schemas:
    PositiveInt64:
      type: integer
      format: int64
      minimum: 0
    JobItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        created_at:
          type: string
          format: date-time
          example: 2022-09-05 00:08:29.54415+03:00
        status:
          type: string
          enum:
            - accepted
            - rejected
            - queued
            - running
            - finished
          example: queued
        source_code:
          type: string
          example: |-
            друкр("Привіт, Світе!");
        exit_code:
          type: number
          format: int64
          nullable: true
          example: 0
        output_url:
          type: string
          format: link
          example: 'https://example.com/api/v1/jobs/d290f1ee-6c54-4b01-90e6-d701748f0851/output'
    JobOutputResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - accepted
            - rejected
            - queued
            - running
            - finished
          example: queued
        rows:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                format: int64
              job_id:
                type: string
                format: uuid
              text:
                type: string
            example:
              - id: 1
                job_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                text: Виконання алгоритму пошуку...
              - id: 2
                job_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                text: 'Результат знайдено: 123'
    JobNotFoundResponse:
      type: object
      properties:
        message:
          type: string
          example: job not found
        documentation_url:
          type: string
          format: link
          example: <link to the current site>
    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: internal error
    CreateJobInput:
      type: object
      required:
        - lang_version
        - source_code
      properties:
        lang_version:
          type: string
          format: SemVer
          example: 0.1.0
        source_code:
          type: string
          example: |-
            друкр("Привіт, Світе!");
